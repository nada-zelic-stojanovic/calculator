{"ast":null,"code":"var _jsxFileName = \"/Users/tsukuyomi/Projects/calculator/src/containers/Calculator/Calculator.js\";\nimport React, { Component } from 'react';\nimport Display from './../../components/Display/Display';\nimport Controls from './../../components/Keys/Controls';\nimport './Calculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isNumber = x => !isNaN(x);\nconst addDigit = (inputExpression, digit) => {\n  const lastIndex = inputExpression.length - 1;\n  const lastElement = inputExpression[lastIndex];\n  if (isNumber(lastElement)) {\n    const newInputExpression = [...inputExpression.slice(0, lastIndex), lastElement.toString().concat(digit)];\n    return newInputExpression;\n  } else {\n    const newInputExpression = [...inputExpression, digit];\n    return newInputExpression;\n  }\n};\nconst switchSign = inputExpression => {\n  const lastIndex = inputExpression.length - 1;\n  const lastElement = inputExpression[lastIndex];\n  if (isNumber(lastElement)) {\n    const newInputExpression = [...inputExpression.slice(0, lastIndex), '(-' + lastElement + ')'];\n    return newInputExpression;\n  }\n  return inputExpression;\n};\nconst handlePercent = inputExpression => {\n  const lastIndex = inputExpression.length - 1;\n  const lastElement = inputExpression[lastIndex];\n  console.log(lastElement);\n  let newLastElement = lastElement / 100;\n  const newInputExpression = [...inputExpression.slice(0, lastIndex), +newLastElement];\n  return newInputExpression;\n};\nclass Calculator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      inputExpression: [],\n      result: '',\n      prevInput: ''\n    };\n    this.handleInput = input => {\n      const {\n        inputExpression\n      } = this.state;\n      if (isNumber(input)) {\n        const newInputExpression = addDigit(inputExpression, input);\n        //console.log(newInputExpression);\n        this.setState({\n          inputExpression: newInputExpression\n        });\n      } else if (input === 'switchSign') {\n        const newInputExpression = switchSign(inputExpression);\n        this.setState({\n          inputExpression: newInputExpression\n        });\n      } else if (input === '%') {\n        const newInputExpression = handlePercent(inputExpression);\n        this.setState({\n          inputExpression: newInputExpression\n        });\n      } else if (isNaN(input) && inputExpression.length > 0) {\n        const newInputExpression = inputExpression.concat(input);\n        this.setState({\n          inputExpression: newInputExpression\n        });\n      }\n    };\n    this.handleParentheses = inputPar => {\n      const {\n        inputExpression\n      } = this.state;\n      const newInputExpression = inputExpression.concat(inputPar);\n      this.setState({\n        inputExpression: newInputExpression\n      });\n    };\n    this.handleEquals = () => {\n      const {\n        inputExpression\n      } = this.state;\n      let strInputExpression;\n      if (typeof inputExpression === 'string') {\n        strInputExpression = inputExpression.concat();\n      } else {\n        strInputExpression = inputExpression.join('');\n      }\n      let result;\n      if (inputExpression.includes('^')) {\n        let newArr = inputExpression.join('').split('^');\n        let [num1, num2] = newArr;\n        result = Math.pow(num1, num2);\n      } else {\n        result = eval(strInputExpression);\n      }\n      let previousInput = strInputExpression;\n      this.setState({\n        result: result,\n        prevInput: previousInput,\n        inputExpression: ''\n      });\n    };\n    this.handleClear = () => {\n      this.setState({\n        inputExpression: '',\n        result: ''\n      });\n    };\n    this.handleBackspace = () => {\n      let {\n        inputExpression\n      } = this.state;\n      let expression = inputExpression.toString().trimRight().slice(0, -1);\n      this.setState({\n        inputExpression: expression\n      });\n    };\n    this.handlePow2 = () => {\n      let result = Math.pow(this.state.inputExpression, 2);\n      const {\n        inputExpression\n      } = this.state;\n      let newInputExp = inputExpression + '^2';\n      this.setState({\n        result: result,\n        prevInput: newInputExp,\n        inputExpression: ''\n      });\n    };\n    this.handleSqrt = () => {\n      let result = Math.sqrt(this.state.inputExpression);\n      const {\n        inputExpression\n      } = this.state;\n      let newInputExp = 'sqrt(' + inputExpression + ')';\n      this.setState({\n        result: result,\n        prevInput: newInputExp,\n        inputExpression: ''\n      });\n    };\n    this.handleReciprocal = () => {\n      let result = 1 / this.state.inputExpression;\n      const {\n        inputExpression\n      } = this.state;\n      let newInputExp = '1/' + inputExpression;\n      this.setState({\n        result: result,\n        prevInput: newInputExp,\n        inputExpression: ''\n      });\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Display, {\n        userInput: this.state.inputExpression,\n        score: this.state.result,\n        previousInput: this.state.prevInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        clicked: this.handleInput,\n        equalsClicked: this.handleEquals,\n        clearClicked: this.handleClear,\n        backspaceClicked: this.handleBackspace,\n        xPow2Clicked: this.handlePow2,\n        sqrtClicked: this.handleSqrt,\n        reciprocalClicked: this.handleReciprocal,\n        parenthesesClicked: this.handleParentheses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Calculator;","map":{"version":3,"names":["React","Component","Display","Controls","jsxDEV","_jsxDEV","isNumber","x","isNaN","addDigit","inputExpression","digit","lastIndex","length","lastElement","newInputExpression","slice","toString","concat","switchSign","handlePercent","console","log","newLastElement","Calculator","constructor","args","state","result","prevInput","handleInput","input","setState","handleParentheses","inputPar","handleEquals","strInputExpression","join","includes","newArr","split","num1","num2","Math","pow","eval","previousInput","handleClear","handleBackspace","expression","trimRight","handlePow2","newInputExp","handleSqrt","sqrt","handleReciprocal","render","children","userInput","score","fileName","_jsxFileName","lineNumber","columnNumber","clicked","equalsClicked","clearClicked","backspaceClicked","xPow2Clicked","sqrtClicked","reciprocalClicked","parenthesesClicked"],"sources":["/Users/tsukuyomi/Projects/calculator/src/containers/Calculator/Calculator.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Display from './../../components/Display/Display';\nimport Controls from './../../components/Keys/Controls';\nimport  './Calculator.css';\n\nconst isNumber = x => !isNaN(x);\n\nconst addDigit = (inputExpression, digit) => {\n  const lastIndex = inputExpression.length - 1;\n  const lastElement = inputExpression[lastIndex];\n  if (isNumber(lastElement)) {\n    const newInputExpression = [\n      ...inputExpression.slice(0, lastIndex),\n      lastElement.toString().concat(digit)\n    ];\n    return newInputExpression;\n  } else {\n    const newInputExpression = [...inputExpression, digit];\n    return newInputExpression;\n  }\n};\n\nconst switchSign = inputExpression => {\n  const lastIndex = inputExpression.length - 1;\n  const lastElement = inputExpression[lastIndex];\n  if (isNumber(lastElement)) {\n    const newInputExpression = [\n      ...inputExpression.slice(0, lastIndex),\n      '(-' + lastElement + ')'\n    ];\n    return newInputExpression;\n  }\n  return inputExpression;\n};\n\nconst handlePercent = inputExpression => {\n  const lastIndex = inputExpression.length - 1;\n  const lastElement = inputExpression[lastIndex];\n  console.log(lastElement);\n\n  let newLastElement = lastElement / 100;\n  const newInputExpression = [\n    ...inputExpression.slice(0, lastIndex),\n    +newLastElement\n  ];\n  return newInputExpression;\n};\n\nclass Calculator extends Component {\n  state = {\n    inputExpression: [],\n    result: '',\n    prevInput: ''\n  };\n\n  handleInput = input => {\n    const { inputExpression } = this.state;\n\n    if (isNumber(input)) {\n      const newInputExpression = addDigit(inputExpression, input);\n      //console.log(newInputExpression);\n      this.setState({ inputExpression: newInputExpression });\n    } else if (input === 'switchSign') {\n      const newInputExpression = switchSign(inputExpression);\n      this.setState({ inputExpression: newInputExpression });\n    } else if (input === '%') {\n      const newInputExpression = handlePercent(inputExpression);\n      this.setState({ inputExpression: newInputExpression });\n    } else if (isNaN(input) && inputExpression.length > 0) {\n      const newInputExpression = inputExpression.concat(input);\n      this.setState({ inputExpression: newInputExpression });\n    }\n  };\n\n  handleParentheses = inputPar => {\n    const { inputExpression } = this.state;\n    const newInputExpression = inputExpression.concat(inputPar);\n    this.setState({ inputExpression: newInputExpression });\n  }\n\n  handleEquals = () => {\n    const { inputExpression } = this.state;\n    let strInputExpression;\n    if (typeof inputExpression === 'string') {\n      strInputExpression = inputExpression.concat();\n    } else {\n      strInputExpression = inputExpression.join('');\n    }\n    let result;\n    if (inputExpression.includes('^')) {\n      let newArr = inputExpression.join('').split('^');\n      let [num1, num2] = newArr;\n      result = Math.pow(num1, num2);\n    } else {\n      result = eval(strInputExpression);\n    }\n    let previousInput = strInputExpression;\n    this.setState({\n      result: result,\n      prevInput: previousInput,\n      inputExpression: ''\n    });\n  };\n\n  handleClear = () => {\n    this.setState({ inputExpression: '', result: '' });\n  };\n\n  handleBackspace = () => {\n    let { inputExpression } = this.state;\n    let expression = inputExpression.toString().trimRight().slice(0, -1);\n    this.setState({ inputExpression: expression });\n  };\n\n  handlePow2 = () => {\n    let result = Math.pow(this.state.inputExpression, 2);\n    const { inputExpression } = this.state;\n    let newInputExp = inputExpression + '^2';\n    this.setState({ result: result, prevInput: newInputExp, inputExpression: '' });\n  };\n\n  handleSqrt = () => {\n    let result = Math.sqrt(this.state.inputExpression);\n    const { inputExpression } = this.state;\n    let newInputExp = 'sqrt(' + inputExpression + ')';\n    this.setState({ result: result, prevInput: newInputExp, inputExpression: '' });\n  };\n\n  handleReciprocal = () => {\n    let result = 1 / this.state.inputExpression;\n    const { inputExpression } = this.state;\n    let newInputExp = '1/' + inputExpression;\n    this.setState({ result: result, prevInput: newInputExp, inputExpression: '' });\n  };\n\n  render() {\n    return (\n      <div>\n        <Display\n          userInput={this.state.inputExpression}\n          score={this.state.result}\n          previousInput={this.state.prevInput}\n        />\n        <Controls\n          clicked={this.handleInput}\n          equalsClicked={this.handleEquals}\n          clearClicked={this.handleClear}\n          backspaceClicked={this.handleBackspace}\n          xPow2Clicked={this.handlePow2}\n          sqrtClicked={this.handleSqrt}\n          reciprocalClicked={this.handleReciprocal}\n          parenthesesClicked={this.handleParentheses}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}